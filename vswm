#!/usr/bin/python3

#    This file is part of VSWM.
#    Copyright (C) 2012  Diogo Oliveira de Melo
#
#    VSWM program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.


import os, re, json, sys
from configparser import ConfigParser, NoOptionError

class NetworkEntry:
    ssid = ""
    ap = ""

    def __eq__(self, other):
        if isinstance(self, other.__class__) and (self.ssid == other.ssid or self.ap == other.ap):
            return True
        if isinstance(other, str) and (self.ssid == other or self.ap == other):
            return True
        return False

def init_wireless(dev):
    os.system('ip link set ' + dev + ' down')
    os.system("rfkill unblock wifi")
    os.system('killall -9 dhclient')
    os.system('killall -9 wpa_supplicant')
    os.system('ip link set ' + dev + ' up')
    os.system('ip addr flush dev ' + dev)
    os.system('sleep 1')

def connect_wep(dev, ssid):
    print("Connecting " + dev + " using WEP to ssid " + ssid);
    os.system("ifconfig " + dev + " down")
    os.system("iwconfig " + dev + " essid '" + ssid + "'")
    os.system("iwconfig " + dev + " ap any")
    os.system('ip link set ' + dev + ' up')

def connect_wpa(dev, ssid, psk, ap):
    print("Connecting " + dev + " using WPA to ssid " + ssid);
    os.system("wpa_passphrase '" + ssid  + "' '" + psk + "' > /etc/wpa_supplicant/wpa_supplicant.conf")
    if (None != ap):
        os.system("sed -i 's/.*ssid.*/        bssid=%s/g' /etc/wpa_supplicant/wpa_supplicant.conf" % (ap))

    os.system("wpa_supplicant -d -Dwext  -i " + dev + " -c /etc/wpa_supplicant/wpa_supplicant.conf >& /var/tmp/wpa_supplicant.log &")
    os.system("sleep 5")

def set_dns(dnsSection):
    dnsList = json.loads(dnsSection)
    try:
        fd = open('/etc/resolv.conf', 'w')
        for dns in dnsList:
            print("    " + dns)
            fd.write('nameserver ' + dns + '\n')

        fd.close()

    except IOError:
        print("Could not open /etc/resolve.conf file, for writting")

    
config = ConfigParser()
config.read_file(open('/etc/vswm.cfg'))

dev = config.get('global', 'dev')
init_wireless(dev)

p = os.popen('iwlist ' + dev + ' scan');
ssid_list = []
print("List of Networks:")

networkEntry = 0

while 1:
    try:
        line = p.readline()
        if not line:
            break;

        if line.find("Address:") != -1:
            line = re.sub("^ * Cell.*Address: ", "", line)
            line = line.replace('\n', '')
            networkEntry = NetworkEntry()
            networkEntry.ap = line

        if line.find("ESSID") != -1:
            line = re.sub("^.*ESSID:", "", line)
            line = re.sub('"', '', line)
            line = line.replace('\n', '')
            networkEntry.ssid = line
            ssid_list.append(networkEntry)
            print("    %s %s" % (networkEntry.ap, networkEntry.ssid))
    except UnicodeDecodeError:
        pass


print

for entry in config.sections():
    if entry != 'global':
        try:
            ssid = config.get(entry, 'ssid')
        except KeyError:
            ssid = None
        except NoOptionError:
            ssid = None

        try:
            ap = config.get(entry, 'ap')
        except KeyError:
            ap = None
        except NoOptionError:
            ap = None

        if None == ssid and None == ap:
            raise ValueError('Each entry must have ssid OR ap')

        try:
            if None != ssid:
                i = ssid_list.index(ssid)
            if None != ap:
                i = ssid_list.index(ap)
        except ValueError:
            continue

        print("Willing to connect to %s %s" % (ssid, ap))

        if 2 == len(sys.argv) and sys.argv[1] != ssid and sys.argv[1] != ap:
            continue

        protocol = config.get(entry, 'protocol')

        if 'WEP' == protocol:
            connect_wep(dev, ssid)
        elif 'WPA' == protocol:
            psk = config.get(entry, 'psk')
            connect_wpa(dev, ssid, psk, ap)
        else:
            print("ERROR: protocol not recognized")
            continue

        net = config.get(entry, 'net')
        try:
            set_dns(config.get('global', 'dns'))
        except NoOptionError as e:
            print("No dns entry defined on vswm.cfg, moving on...")

        if 'dhcp' == net:
            print("Running dhclient. It may override DNS settings")
            os.system("dhclient " + dev)
        elif 'static' == net:
            address = config.get(entry, 'address')
            gateway = config.get(entry, 'gateway')
            print("address: " + address)
            print("gateway: " + gateway)
            os.system("ifconfig " + dev + " " + address)
            os.system("route add default gw " + gateway + " " + dev)
        try:
            os.system("sh " + config.get(entry, 'post-script'))
        except NoOptionError:
            break
